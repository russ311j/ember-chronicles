name: Deploy to GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  deployments: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Pre-check job to verify files exist and validate structure
  verify:
    runs-on: ubuntu-latest
    outputs:
      files_exist: ${{ steps.check.outputs.files_exist }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Check if files exist
        id: check
        shell: bash
        run: |
          if [ ! -d "./rpg-game" ]; then
            echo "::error::Directory ./rpg-game not found!"
            exit 1
          fi
          
          # Verify essential files exist
          required_files=("index.html" "game.html")
          for file in "${required_files[@]}"; do
            if [ ! -f "./rpg-game/$file" ]; then
              echo "::error::Required file $file not found in rpg-game directory!"
              exit 1
            fi
          done
          echo "files_exist=true" >> $GITHUB_OUTPUT

  build:
    needs: verify
    runs-on: ubuntu-latest
    environment: github-pages
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Prepare site root
        run: |
          # Move all contents from rpg-game to the root deployment directory
          mkdir _site
          cp -r rpg-game/* _site/
          
          # Verify index.html exists at root
          if [ ! -f "_site/index.html" ]; then
            echo "::error::index.html not found in site root!"
            exit 1
          fi
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'
          
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        timeout-minutes: 10
        
      - name: Verify deployment
        if: always()
        run: |
          if [ "${{ steps.deployment.outcome }}" != "success" ]; then
            echo "::error::Deployment failed! Checking status..."
            
            # Check deployment status
            if curl -s -o /dev/null -w "%{http_code}" ${{ steps.deployment.outputs.page_url }} | grep -q "200"; then
              echo "Site is accessible despite deployment status!"
            else
              echo "::error::Site is not accessible. Deployment failed!"
              exit 1
            fi
          fi
          
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up temporary files..."
          rm -rf ./.github/tmp || true 