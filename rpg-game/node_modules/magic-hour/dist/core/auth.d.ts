import { RequestConfig } from "./core-client";
export interface AuthProvider {
    applyAuth: (cfg: RequestConfig) => Promise<RequestConfig>;
    setValue: (val?: string | undefined) => void;
}
export declare class AuthBasic implements AuthProvider {
    username: string | null;
    password: string | null;
    constructor(username?: string, password?: string);
    applyAuth(cfg: RequestConfig): Promise<RequestConfig>;
    setValue(val?: string | undefined): void;
}
export declare class AuthBearer implements AuthProvider {
    token: string | null;
    constructor(token?: string);
    applyAuth(cfg: RequestConfig): Promise<RequestConfig>;
    setValue(val?: string | undefined): void;
}
export declare class AuthKeyQuery implements AuthProvider {
    name: string;
    key: string | null;
    constructor(name: string, key?: string);
    applyAuth(cfg: RequestConfig): Promise<RequestConfig>;
    setValue(val?: string | undefined): void;
}
export declare class AuthKeyHeader implements AuthProvider {
    name: string;
    key: string | null;
    constructor(name: string, key?: string);
    applyAuth(cfg: RequestConfig): Promise<RequestConfig>;
    setValue(val?: string | undefined): void;
}
export declare class AuthCookieHeader implements AuthProvider {
    name: string;
    key: string | null;
    constructor(name: string, key?: string);
    applyAuth(cfg: RequestConfig): Promise<RequestConfig>;
    setValue(val?: string | undefined): void;
}
/**
 * OAuth2 authentication props for a password flow
 *
 * Details:
 *    https://datatracker.ietf.org/doc/html/rfc6749#section-4.3
 */
export type OAuth2PasswordProps = {
    username: string;
    password: string;
    clientId?: string | undefined;
    clientSecret?: string | undefined;
    grantType?: "password" | string | undefined;
    scope?: string[] | undefined;
};
/**
 * OAuth2 authentication props for a client credentials flow
 *
 * Details:
 *    https://datatracker.ietf.org/doc/html/rfc6749#section-4.4
 */
export type OAuth2ClientCredentialsProps = {
    clientId: string;
    clientSecret: string;
    grantType?: "client_credentials" | string | undefined;
    scope?: string[] | undefined;
};
export type OAuth2ProviderProps = {
    tokenUrl: string;
    accessTokenPointer: string;
    expiresInPointer: string;
    credentialsLocation: "request_body" | "basic_authorization_header";
    bodyContent: "form" | "json";
    requestMutator: AuthProvider;
    username?: string | undefined;
    password?: string | undefined;
    clientId?: string | undefined;
    clientSecret?: string | undefined;
    grantType: "password" | "client_credentials" | string;
    scope?: string[] | undefined;
};
export declare class OAuth2 implements AuthProvider {
    props: OAuth2ProviderProps;
    accessToken?: string | undefined;
    expiresAt?: Date;
    constructor(props: OAuth2ProviderProps);
    refresh(): Promise<{
        accessToken: string;
        expiresAt: Date;
    }>;
    applyAuth(cfg: RequestConfig): Promise<RequestConfig>;
    setValue(val?: string | undefined): void;
}
