import * as z from "zod";
import { Response as NodeResponse } from "node-fetch";
import { AuthProvider } from "./auth";
import { ApiPromise } from "./api-promise";
export interface CoreClientProps {
    baseUrl: string;
    timeout?: number | undefined;
}
export type ApiResponse = Response | NodeResponse;
export type HttpMethod = "get" | "post" | "put" | "patch" | "delete";
export type RequestConfig = {
    method: HttpMethod;
    path: string;
    responseSchema?: z.Schema;
    responseStream?: boolean;
    responseRaw?: boolean;
    auth?: string[];
    query?: string[];
    body?: any;
    contentType?: string;
    headers?: Record<string, string>;
    opts?: RequestOptions | undefined;
    withCredentials?: boolean;
};
export interface RequestOptions {
    timeout?: number;
    additionalHeaders?: Record<string, string>;
    additionalQuery?: Record<string, string>;
}
export declare class CoreClient {
    baseUrl: string;
    private auths;
    private timeout;
    constructor(props: CoreClientProps);
    registerAuth(name: string, provider: AuthProvider): void;
    private applyAuths;
    buildUrl(path: string): string;
    private buildUrlFromCfg;
    private applyHeaders;
    private encodeBodyByContentType;
    private buildRequestInit;
    private request;
    makeRequest<R>(cfg: RequestConfig): ApiPromise<R>;
}
export declare class CoreResourceClient {
    protected _client: CoreClient;
    constructor(client: CoreClient);
}
