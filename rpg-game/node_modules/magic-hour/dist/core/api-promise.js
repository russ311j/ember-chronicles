"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
    function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
    function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiPromise = void 0;
const binary_response_1 = require("./binary-response");
const content_type_1 = require("./content-type");
class ApiPromise extends Promise {
    constructor(responseProps) {
        super((resolve) => {
            resolve(null);
        });
        this.responseProps = responseProps;
    }
    /**
     * Gets the raw response as returned by `fetch` rather than automatically
     * parsing the response.
     */
    asResponse() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.responseProps.responsePromise;
        });
    }
    getResponseType(contentType) {
        if (content_type_1.JSON_PATTERN.test(contentType)) {
            return "json";
        }
        else if (content_type_1.TEXT_PATTERN.test(contentType)) {
            return "text";
        }
        else {
            return "binary";
        }
    }
    parseResponse() {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const { responsePromise, responseSchema, responseRaw } = this.responseProps;
            const response = yield responsePromise;
            if (response.status === 204) {
                return null;
            }
            else if (responseRaw) {
                return response;
            }
            const contentType = (_a = response.headers.get("content-type")) !== null && _a !== void 0 ? _a : "";
            switch (this.getResponseType(contentType)) {
                case "json":
                    const rawJson = yield response.json();
                    return responseSchema ? responseSchema.parse(rawJson) : rawJson;
                case "text":
                    return (yield response.text());
                case "binary":
                default:
                    return new binary_response_1.BinaryResponse(yield response.blob(), contentType);
            }
        });
    }
    handleNodeStream(stream) {
        return __asyncGenerator(this, arguments, function* handleNodeStream_1() {
            var _a, e_1, _b, _c;
            const { responseSchema } = this.responseProps;
            const parser = new EventSourceParser();
            try {
                for (var _d = true, stream_1 = __asyncValues(stream), stream_1_1; stream_1_1 = yield __await(stream_1.next()), _a = stream_1_1.done, !_a; _d = true) {
                    _c = stream_1_1.value;
                    _d = false;
                    const chunk = _c;
                    const text = chunk.toString();
                    const messages = parser.parse(text);
                    for (const message of messages) {
                        if (message.data) {
                            const rawJson = { data: JSON.parse(message.data) };
                            yield yield __await(responseSchema ? responseSchema.parse(rawJson) : rawJson);
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = stream_1.return)) yield __await(_b.call(stream_1));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    handleWebStream(stream) {
        return __asyncGenerator(this, arguments, function* handleWebStream_1() {
            const { responseSchema } = this.responseProps;
            const reader = stream.getReader();
            const decoder = new TextDecoder();
            const parser = new EventSourceParser();
            try {
                while (true) {
                    const { done, value } = yield __await(reader.read());
                    if (done) {
                        break;
                    }
                    const chunk = decoder.decode(value, { stream: true });
                    const messages = parser.parse(chunk);
                    for (const message of messages) {
                        if (message.data) {
                            const rawJson = { data: JSON.parse(message.data) };
                            yield yield __await(responseSchema ? responseSchema.parse(rawJson) : rawJson);
                        }
                    }
                }
            }
            finally {
                reader.releaseLock();
            }
        });
    }
    asEventStream() {
        return __asyncGenerator(this, arguments, function* asEventStream_1() {
            const { responsePromise, responseStream } = this.responseProps;
            if (!responseStream) {
                throw new Error("Response is not an event stream");
            }
            const response = yield __await(responsePromise);
            if (!response.body) {
                throw new Error("Response body is undefined");
            }
            // Check if we're in Node.js environment
            if ("pipe" in response.body && typeof response.body.pipe === "function") {
                yield __await(yield* __asyncDelegator(__asyncValues(this.handleNodeStream(response.body))));
            }
            else {
                yield __await(yield* __asyncDelegator(__asyncValues(this.handleWebStream(response.body))));
            }
        });
    }
    next() {
        return __awaiter(this, void 0, void 0, function* () {
            const { responseStream } = this.responseProps;
            if (responseStream) {
                const iterator = this.asEventStream();
                const result = yield iterator.next();
                return result;
            }
            const value = yield this.parseResponse();
            return { value, done: true };
        });
    }
    [Symbol.asyncIterator]() {
        const iterator = {
            next: () => __awaiter(this, void 0, void 0, function* () {
                const { responseStream } = this.responseProps;
                if (responseStream) {
                    const stream = this.asEventStream();
                    return stream.next();
                }
                const value = yield this.parseResponse();
                return { value, done: true };
            }),
        };
        return iterator;
    }
    then(onfulfilled, onrejected) {
        if (this.responseProps.responseStream) {
            return Promise.resolve(this.asEventStream());
        }
        return this.parseResponse().then(onfulfilled, onrejected);
    }
    catch(onrejected) {
        return this.parseResponse().catch(onrejected);
    }
    finally(onfinally) {
        return this.parseResponse().finally(onfinally);
    }
}
exports.ApiPromise = ApiPromise;
class EventSourceParser {
    constructor() {
        this.buffer = "";
    }
    parse(chunk) {
        this.buffer += chunk;
        const messages = [];
        const lines = this.buffer.split("\n");
        // Keep the last line in buffer if it's not complete
        this.buffer = lines.pop() || "";
        let currentMessage = {};
        for (const line of lines) {
            if (line.trim() === "") {
                if (currentMessage.data) {
                    const message = {
                        event: currentMessage.event,
                        data: currentMessage.data,
                        id: currentMessage.id,
                    };
                    messages.push(message);
                }
                currentMessage = {};
                continue;
            }
            const [fieldName, ...fieldValue] = line.split(":");
            const value = fieldValue.join(":").trim();
            switch (fieldName) {
                case "event":
                    currentMessage.event = value;
                    break;
                case "data":
                    currentMessage.data = currentMessage.data
                        ? currentMessage.data + "\n" + value
                        : value;
                    break;
                case "id":
                    currentMessage.id = value;
                    break;
                case "retry":
                    // Handle retry if needed
                    break;
            }
        }
        return messages;
    }
}
