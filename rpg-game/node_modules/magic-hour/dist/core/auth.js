"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAuth2 = exports.AuthCookieHeader = exports.AuthKeyHeader = exports.AuthKeyQuery = exports.AuthBearer = exports.AuthBasic = void 0;
const qs_1 = __importDefault(require("qs"));
const form_urlencoded_1 = __importDefault(require("form-urlencoded"));
const js_base64_1 = require("js-base64");
const jsonpointer = __importStar(require("jsonpointer"));
const runtime_1 = require("./runtime");
const api_error_1 = require("./api-error");
const AUTHORIZATION = "Authorization";
const COOKIE = "Cookie";
class AuthBasic {
    constructor(username, password) {
        this.username = username !== null && username !== void 0 ? username : null;
        this.password = password !== null && password !== void 0 ? password : null;
    }
    applyAuth(cfg) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const headers = (_a = cfg.headers) !== null && _a !== void 0 ? _a : {};
            if (this.username !== null && this.password !== null) {
                const encoded = (0, js_base64_1.toBase64)(`${this.username}:${this.password}`);
                cfg.headers = headers;
                headers[AUTHORIZATION] = `Basic ${encoded}`;
            }
            return cfg;
        });
    }
    setValue(val) {
        this.username = val !== null && val !== void 0 ? val : null;
    }
}
exports.AuthBasic = AuthBasic;
class AuthBearer {
    constructor(token) {
        this.token = token !== null && token !== void 0 ? token : null;
    }
    applyAuth(cfg) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const headers = (_a = cfg.headers) !== null && _a !== void 0 ? _a : {};
            if (this.token !== null) {
                cfg.headers = headers;
                headers[AUTHORIZATION] = `Bearer ${this.token}`;
            }
            return cfg;
        });
    }
    setValue(val) {
        this.token = val !== null && val !== void 0 ? val : null;
    }
}
exports.AuthBearer = AuthBearer;
class AuthKeyQuery {
    constructor(name, key) {
        this.name = name;
        this.key = key !== null && key !== void 0 ? key : null;
    }
    applyAuth(cfg) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const query = (_a = cfg.query) !== null && _a !== void 0 ? _a : [];
            if (this.key !== null) {
                cfg.query = query;
                query.push(qs_1.default.stringify({ [this.name]: this.key }));
            }
            return cfg;
        });
    }
    setValue(val) {
        this.key = val !== null && val !== void 0 ? val : null;
    }
}
exports.AuthKeyQuery = AuthKeyQuery;
class AuthKeyHeader {
    constructor(name, key) {
        this.name = name;
        this.key = key !== null && key !== void 0 ? key : null;
    }
    applyAuth(cfg) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            const headers = (_a = cfg.headers) !== null && _a !== void 0 ? _a : {};
            if (this.key !== null) {
                cfg.headers = headers;
                headers[this.name] = this.key;
            }
            return cfg;
        });
    }
    setValue(val) {
        this.key = val !== null && val !== void 0 ? val : null;
    }
}
exports.AuthKeyHeader = AuthKeyHeader;
class AuthCookieHeader {
    constructor(name, key) {
        this.name = name;
        this.key = key !== null && key !== void 0 ? key : null;
    }
    applyAuth(cfg) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            if (runtime_1.RUNTIME.type === "browser") {
                cfg.withCredentials = true;
            }
            else if (this.key !== null) {
                const headers = (_a = cfg.headers) !== null && _a !== void 0 ? _a : {};
                const cookies = (_b = headers[COOKIE]) !== null && _b !== void 0 ? _b : "";
                headers[COOKIE] = `${cookies.length > 0 ? ";" : ""}${this.name}=${this.key}`;
                cfg.headers = headers;
            }
            return cfg;
        });
    }
    setValue(val) {
        this.key = val !== null && val !== void 0 ? val : null;
    }
}
exports.AuthCookieHeader = AuthCookieHeader;
class OAuth2 {
    constructor(props) {
        this.props = props;
    }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            const { tokenUrl, username, password, clientId, clientSecret, scope, grantType, credentialsLocation, bodyContent, accessTokenPointer, expiresInPointer, } = this.props;
            const reqHeaders = {};
            const reqData = {
                grant_type: grantType,
            };
            // Add client credentials
            if (typeof clientId !== "undefined" &&
                typeof clientSecret !== "undefined") {
                if (credentialsLocation === "basic_authorization_header") {
                    const encoded = (0, js_base64_1.toBase64)(`${clientId}:${clientSecret}`);
                    reqHeaders[AUTHORIZATION] = `Basic ${encoded}`;
                }
                else {
                    reqData["client_id"] = clientId;
                    reqData["client_secret"] = clientSecret;
                }
            }
            if (typeof username !== "undefined") {
                reqData["username"] = username;
            }
            if (typeof password !== "undefined") {
                reqData["password"] = password;
            }
            if (typeof scope !== "undefined") {
                reqData["scope"] = scope.join(" ");
            }
            const reqInit = { method: "POST" };
            if (bodyContent === "form") {
                reqInit.body = (0, form_urlencoded_1.default)(reqData);
                reqHeaders["content-type"] = "application/x-www-form-urlencoded";
            }
            else {
                reqInit.body = JSON.stringify(reqData);
                reqHeaders["content-type"] = "application/json";
            }
            reqInit.headers = reqHeaders;
            const fetcherFn = runtime_1.RUNTIME.type === "node" || typeof fetch !== "function"
                ? require("node-fetch").default
                : fetch;
            const tokenRes = yield fetcherFn(tokenUrl, reqInit);
            if (!tokenRes.ok) {
                throw new api_error_1.ApiError({
                    method: "post",
                    path: tokenUrl,
                    headers: reqHeaders,
                    body: reqData,
                    contentType: reqHeaders["content-type"],
                }, tokenRes);
            }
            const tokenResJson = yield tokenRes.json();
            const accessTokenRaw = jsonpointer.get(tokenResJson, accessTokenPointer);
            const accessToken = typeof accessTokenRaw === "string" ? accessTokenRaw : "";
            const expiresInRaw = jsonpointer.get(tokenResJson, expiresInPointer);
            const expiresInSecs = typeof expiresInRaw == "number" ? expiresInRaw : 600;
            const now = new Date();
            const expiresAt = new Date(now.getTime() + expiresInSecs * 1000);
            return { accessToken, expiresAt };
        });
    }
    applyAuth(cfg) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.accessToken) {
                const { accessToken, expiresAt } = yield this.refresh();
                this.accessToken = accessToken;
                this.expiresAt = expiresAt;
            }
            this.props.requestMutator.setValue(this.accessToken);
            return yield this.props.requestMutator.applyAuth(cfg);
        });
    }
    setValue(val) {
        throw "an OAuth2 auth provider can not a requestMutator";
    }
}
exports.OAuth2 = OAuth2;
