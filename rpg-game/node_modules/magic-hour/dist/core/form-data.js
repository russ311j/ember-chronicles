"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isUploadFile = isUploadFile;
exports.isNodeReadStream = isNodeReadStream;
exports.isFileLike = isFileLike;
exports.isBlobLike = isBlobLike;
exports.createForm = createForm;
const runtime_1 = require("./runtime");
function isUploadFile(val) {
    return isFileLike(val) || isNodeReadStream(val);
}
function isNodeReadStream(val) {
    // node read stream duck-typing check
    return (runtime_1.RUNTIME.type === "node" &&
        typeof val === "object" &&
        typeof val.bytesRead === "number" &&
        (typeof val.path === "string" || val.path instanceof Buffer) &&
        typeof val.pending === "boolean" &&
        typeof val.readable === "boolean" &&
        typeof val.read === "function" &&
        typeof val.setEncoding === "function" &&
        typeof val.pause === "function" &&
        typeof val.resume === "function" &&
        typeof val.isPaused === "function" &&
        typeof val.pipe === "function" &&
        typeof val.unpipe === "function" &&
        typeof val.unshift === "function" &&
        typeof val.wrap === "function");
}
function isFileLike(val) {
    // https://developer.mozilla.org/docs/Web/API/File
    // https://github.com/node-fetch/fetch-blob/blob/main/file.js
    return (typeof (val === null || val === void 0 ? void 0 : val.lastModified) === "number" &&
        typeof (val === null || val === void 0 ? void 0 : val.name) === "string" &&
        isBlobLike(val));
}
function isBlobLike(val) {
    // https://developer.mozilla.org/docs/Web/API/Blob
    // https://github.com/node-fetch/fetch-blob/blob/main/index.js
    return (typeof (val === null || val === void 0 ? void 0 : val.size) === "number" &&
        typeof (val === null || val === void 0 ? void 0 : val.type) === "string" &&
        typeof (val === null || val === void 0 ? void 0 : val.slice) === "function" &&
        typeof (val === null || val === void 0 ? void 0 : val.text) === "function" &&
        typeof (val === null || val === void 0 ? void 0 : val.arrayBuffer) === "function");
}
function appendFormData(form, key, val) {
    if (val === null || typeof val === "undefined") {
        return;
    }
    else if (["string", "boolean", "number"].includes(typeof val)) {
        form.append(key, val.toString());
    }
    else if (Array.isArray(val)) {
        for (const arrVal of val) {
            appendFormData(form, key, arrVal);
        }
    }
    else if (isUploadFile(val)) {
        form.append(key, val);
    }
    else if (typeof val === "object") {
        for (const [objKey, objVal] of Object.entries(val)) {
            appendFormData(form, `${key}[${objKey}]`, objVal);
        }
    }
    else {
        throw new TypeError(`Invalid value given to form: ${val}`);
    }
}
function createForm(data) {
    let form;
    if (runtime_1.RUNTIME.type === "node") {
        const NodeFormData = require("form-data");
        form = new NodeFormData();
    }
    else {
        form = new FormData();
    }
    for (const [key, val] of Object.entries(data)) {
        appendFormData(form, key, val);
    }
    return form;
}
