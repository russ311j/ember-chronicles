import * as z from "zod";
import { ApiResponse } from "./core-client";
export interface ApiPromiseProps {
    responsePromise: Promise<ApiResponse>;
    responseStream: boolean;
    responseRaw: boolean;
    responseSchema?: z.Schema | undefined;
}
export type EventSourceResponse<T> = AsyncIterableIterator<T>;
export declare class ApiPromise<T> extends Promise<T> implements AsyncIterator<T>, AsyncIterable<T> {
    private responseProps;
    constructor(responseProps: ApiPromiseProps);
    /**
     * Gets the raw response as returned by `fetch` rather than automatically
     * parsing the response.
     */
    asResponse(): Promise<ApiResponse>;
    private getResponseType;
    private parseResponse;
    private handleNodeStream;
    private handleWebStream;
    asEventStream(): AsyncIterableIterator<T>;
    next(): Promise<IteratorResult<T>>;
    [Symbol.asyncIterator](): AsyncIterator<T>;
    then<Result1 = T, Result2 = never>(onfulfilled?: ((value: T) => Result1 | PromiseLike<Result1>) | undefined | null, onrejected?: ((reason: any) => Result2 | PromiseLike<Result2>) | undefined | null): Promise<Result1 | Result2>;
    catch<Result = never>(onrejected?: ((reason: any) => Result | PromiseLike<Result>) | undefined | null): Promise<T | Result>;
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}
