"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageProjectsClient = void 0;
const core_1 = require("../../../core");
const get_v1_image_projects_id_response_1 = require("../../../types/get-v1-image-projects-id-response");
class ImageProjectsClient extends core_1.CoreResourceClient {
    constructor(client) {
        super(client);
    }
    /**
     * Get image details
     *
     * Get the details of a image project. The `downloads` field will be empty unless the image was successfully rendered.
     *
     * The image can be one of the following status
     * - `draft` - not currently used
     * - `queued` - the job is queued and waiting for a GPU
     * - `rendering` - the generation is in progress
     * - `complete` - the image is successful created
     * - `error` - an error occurred during rendering
     * - `canceled` - image render is canceled by the user
     *
     *
     * GET /v1/image-projects/{id}
     */
    get(request, opts) {
        return this._client.makeRequest({
            method: "get",
            path: `/v1/image-projects/${request.id}`,
            auth: ["bearerAuth"],
            responseSchema: get_v1_image_projects_id_response_1.Schemas$GetV1ImageProjectsIdResponse.in,
            opts,
        });
    }
    /**
     * Delete image
     *
     * Permanently delete the rendered image. This action is not reversible, please be sure before deleting.
     *
     * DELETE /v1/image-projects/{id}
     */
    delete(request, opts) {
        return this._client.makeRequest({
            method: "delete",
            path: `/v1/image-projects/${request.id}`,
            auth: ["bearerAuth"],
            responseRaw: true,
            opts,
        });
    }
}
exports.ImageProjectsClient = ImageProjectsClient;
