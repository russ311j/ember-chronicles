"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadUrlsClient = void 0;
const core_1 = require("../../../../core");
const post_v1_files_upload_urls_body_1 = require("../../../../types/post-v1-files-upload-urls-body");
const post_v1_files_upload_urls_response_1 = require("../../../../types/post-v1-files-upload-urls-response");
class UploadUrlsClient extends core_1.CoreResourceClient {
    constructor(client) {
        super(client);
    }
    /**
     * Generate asset upload urls
     *
     * Create a list of urls used to upload the assets needed to generate a video. Each video type has their own requirements on what assets are required. Please refer to the specific mode API for more details. The response array will be in the same order as the request body.
     *
     * Below is the list of valid extensions for each asset type:
     *
     * - video: mp4, m4v, mov, webm
     * - audio: mp3, mpeg, wav, aac, aiff, flac
     * - image: png, jpg, jpeg, webp, avif, jp2, tiff, bmp
     *
     * Note: `.gif` is supported for face swap API `video_file_path` field.
     *
     * After receiving the upload url, you can upload the file by sending a PUT request with the header `'Content-Type: application/octet-stream'`.
     *
     * For example using curl
     *
     * ```
     * curl -X PUT -H 'Content-Type: application/octet-stream' \
     *   --data '@/path/to/file/video.mp4' \
     *   https://videos.magichour.ai/api-assets/id/video.mp4?auth-value=1234567890
     * ```
     *
     *
     * POST /v1/files/upload-urls
     */
    create(request, opts) {
        return this._client.makeRequest({
            method: "post",
            path: "/v1/files/upload-urls",
            auth: ["bearerAuth"],
            contentType: "application/json",
            body: post_v1_files_upload_urls_body_1.Schemas$PostV1FilesUploadUrlsBody.out.parse(request),
            responseSchema: post_v1_files_upload_urls_response_1.Schemas$PostV1FilesUploadUrlsResponse.in,
            opts,
        });
    }
}
exports.UploadUrlsClient = UploadUrlsClient;
