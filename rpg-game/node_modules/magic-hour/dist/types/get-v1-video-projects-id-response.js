"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schemas$GetV1VideoProjectsIdResponse = void 0;
const get_v1_video_projects_id_response_download_1 = require("./get-v1-video-projects-id-response-download");
const get_v1_video_projects_id_response_downloads_item_1 = require("./get-v1-video-projects-id-response-downloads-item");
const get_v1_video_projects_id_response_error_1 = require("./get-v1-video-projects-id-response-error");
const core_1 = require("../core");
const z = __importStar(require("zod"));
/**
 * Takes network data, validates it, and transforms keys to match typescript object GetV1VideoProjectsIdResponse
 */
const SchemaIn$GetV1VideoProjectsIdResponse = z
    .object({
    created_at: z.string(),
    download: get_v1_video_projects_id_response_download_1.Schemas$GetV1VideoProjectsIdResponseDownload.in.nullable(),
    downloads: z.array(get_v1_video_projects_id_response_downloads_item_1.Schemas$GetV1VideoProjectsIdResponseDownloadsItem.in),
    enabled: z.boolean(),
    end_seconds: z.number(),
    error: get_v1_video_projects_id_response_error_1.Schemas$GetV1VideoProjectsIdResponseError.in.nullable(),
    fps: z.number(),
    height: z.number().int(),
    id: z.string(),
    name: z.string().nullable(),
    start_seconds: z.number(),
    status: z.enum([
        "canceled",
        "complete",
        "draft",
        "error",
        "queued",
        "rendering",
    ]),
    total_frame_cost: z.number().int(),
    type: z.enum([
        "ANIMATION",
        "AUTO_SUBTITLE",
        "FACE_SWAP",
        "IMAGE_TO_VIDEO",
        "LIP_SYNC",
        "TEXT_TO_VIDEO",
        "VIDEO_TO_VIDEO",
    ]),
    width: z.number().int(),
})
    .transform((obj) => {
    return (0, core_1.zodTransform)(obj, {
        created_at: "createdAt",
        download: "download",
        downloads: "downloads",
        enabled: "enabled",
        end_seconds: "endSeconds",
        error: "error",
        fps: "fps",
        height: "height",
        id: "id",
        name: "name",
        start_seconds: "startSeconds",
        status: "status",
        total_frame_cost: "totalFrameCost",
        type: "type",
        width: "width",
    });
});
/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$GetV1VideoProjectsIdResponse
 */
const SchemaOut$GetV1VideoProjectsIdResponse = z
    .object({
    createdAt: z.string(),
    download: get_v1_video_projects_id_response_download_1.Schemas$GetV1VideoProjectsIdResponseDownload.out.nullable(),
    downloads: z.array(get_v1_video_projects_id_response_downloads_item_1.Schemas$GetV1VideoProjectsIdResponseDownloadsItem.out),
    enabled: z.boolean(),
    endSeconds: z.number(),
    error: get_v1_video_projects_id_response_error_1.Schemas$GetV1VideoProjectsIdResponseError.out.nullable(),
    fps: z.number(),
    height: z.number().int(),
    id: z.string(),
    name: z.string().nullable(),
    startSeconds: z.number(),
    status: z.enum([
        "canceled",
        "complete",
        "draft",
        "error",
        "queued",
        "rendering",
    ]),
    totalFrameCost: z.number().int(),
    type: z.enum([
        "ANIMATION",
        "AUTO_SUBTITLE",
        "FACE_SWAP",
        "IMAGE_TO_VIDEO",
        "LIP_SYNC",
        "TEXT_TO_VIDEO",
        "VIDEO_TO_VIDEO",
    ]),
    width: z.number().int(),
})
    .transform((obj) => {
    return (0, core_1.zodTransform)(obj, {
        createdAt: "created_at",
        download: "download",
        downloads: "downloads",
        enabled: "enabled",
        endSeconds: "end_seconds",
        error: "error",
        fps: "fps",
        height: "height",
        id: "id",
        name: "name",
        startSeconds: "start_seconds",
        status: "status",
        totalFrameCost: "total_frame_cost",
        type: "type",
        width: "width",
    });
});
exports.Schemas$GetV1VideoProjectsIdResponse = {
    in: SchemaIn$GetV1VideoProjectsIdResponse,
    out: SchemaOut$GetV1VideoProjectsIdResponse,
};
