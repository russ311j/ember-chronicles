import { External$GetV1VideoProjectsIdResponseDownload, GetV1VideoProjectsIdResponseDownload } from "./get-v1-video-projects-id-response-download";
import { External$GetV1VideoProjectsIdResponseDownloadsItem, GetV1VideoProjectsIdResponseDownloadsItem } from "./get-v1-video-projects-id-response-downloads-item";
import { External$GetV1VideoProjectsIdResponseError, GetV1VideoProjectsIdResponseError } from "./get-v1-video-projects-id-response-error";
import * as z from "zod";
/**
 * Success
 */
export type GetV1VideoProjectsIdResponse = {
    createdAt: string;
    /**
     * Deprecated: Please use `.downloads` instead. The download url and expiration date of the video project
     */
    download: GetV1VideoProjectsIdResponseDownload | null;
    downloads: GetV1VideoProjectsIdResponseDownloadsItem[];
    /**
     * Indicates whether the resource is deleted
     */
    enabled: boolean;
    /**
     * The end time of the input video in seconds
     */
    endSeconds: number;
    /**
     * In the case of an error, this object will contain the error encountered during video render
     */
    error: GetV1VideoProjectsIdResponseError | null;
    /**
     * Frame rate of the video. If the status is not 'complete', the frame rate is an estimate and will be adjusted when the video completes.
     */
    fps: number;
    /**
     * The height of the final output video. The maximum height depends on your subscription. Please refer to our [pricing page](https://magichour.ai/pricing) for more details
     */
    height: number;
    /**
     * Unique ID of the video. This value can be used in the [get video project API](https://docs.magichour.ai/api-reference/video-projects/get-video-details) to fetch additional details such as status
     */
    id: string;
    /**
     * The name of the video.
     */
    name: string | null;
    /**
     * The start time of the input video in seconds
     */
    startSeconds: number;
    /**
     * The status of the video.
     */
    status: "canceled" | "complete" | "draft" | "error" | "queued" | "rendering";
    /**
     * The amount of frames used to generate the video. If the status is not 'complete', the cost is an estimate and will be adjusted when the video completes.
     */
    totalFrameCost: number;
    type: "ANIMATION" | "AUTO_SUBTITLE" | "FACE_SWAP" | "IMAGE_TO_VIDEO" | "LIP_SYNC" | "TEXT_TO_VIDEO" | "VIDEO_TO_VIDEO";
    /**
     * The width of the final output video. The maximum width depends on your subscription. Please refer to our [pricing page](https://magichour.ai/pricing) for more details
     */
    width: number;
};
/**
 * @internal
 * GetV1VideoProjectsIdResponse without any key transformation, this is what
 * we expect to come in as network data
 */
export type External$GetV1VideoProjectsIdResponse = {
    created_at: string;
    download: External$GetV1VideoProjectsIdResponseDownload | null;
    downloads: External$GetV1VideoProjectsIdResponseDownloadsItem[];
    enabled: boolean;
    end_seconds: number;
    error: External$GetV1VideoProjectsIdResponseError | null;
    fps: number;
    height: number;
    id: string;
    name: string | null;
    start_seconds: number;
    status: "canceled" | "complete" | "draft" | "error" | "queued" | "rendering";
    total_frame_cost: number;
    type: "ANIMATION" | "AUTO_SUBTITLE" | "FACE_SWAP" | "IMAGE_TO_VIDEO" | "LIP_SYNC" | "TEXT_TO_VIDEO" | "VIDEO_TO_VIDEO";
    width: number;
};
export declare const Schemas$GetV1VideoProjectsIdResponse: {
    in: z.ZodType<GetV1VideoProjectsIdResponse, z.ZodTypeDef, unknown>;
    out: z.ZodType<External$GetV1VideoProjectsIdResponse, z.ZodTypeDef, GetV1VideoProjectsIdResponse>;
};
