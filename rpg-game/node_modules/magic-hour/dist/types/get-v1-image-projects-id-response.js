"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schemas$GetV1ImageProjectsIdResponse = void 0;
const get_v1_image_projects_id_response_downloads_item_1 = require("./get-v1-image-projects-id-response-downloads-item");
const get_v1_image_projects_id_response_error_1 = require("./get-v1-image-projects-id-response-error");
const core_1 = require("../core");
const z = __importStar(require("zod"));
/**
 * Takes network data, validates it, and transforms keys to match typescript object GetV1ImageProjectsIdResponse
 */
const SchemaIn$GetV1ImageProjectsIdResponse = z
    .object({
    created_at: z.string(),
    downloads: z.array(get_v1_image_projects_id_response_downloads_item_1.Schemas$GetV1ImageProjectsIdResponseDownloadsItem.in),
    enabled: z.boolean(),
    error: get_v1_image_projects_id_response_error_1.Schemas$GetV1ImageProjectsIdResponseError.in.nullable(),
    id: z.string(),
    image_count: z.number().int(),
    name: z.string().nullable(),
    status: z.enum([
        "canceled",
        "complete",
        "draft",
        "error",
        "queued",
        "rendering",
    ]),
    total_frame_cost: z.number().int(),
    type: z.enum([
        "AI_HEADSHOT",
        "AI_IMAGE",
        "BACKGROUND_REMOVER",
        "CLOTHES_CHANGER",
        "FACE_SWAP",
        "IMAGE_UPSCALER",
        "PHOTO_EDITOR",
        "QR_CODE",
    ]),
})
    .transform((obj) => {
    return (0, core_1.zodTransform)(obj, {
        created_at: "createdAt",
        downloads: "downloads",
        enabled: "enabled",
        error: "error",
        id: "id",
        image_count: "imageCount",
        name: "name",
        status: "status",
        total_frame_cost: "totalFrameCost",
        type: "type",
    });
});
/**
 * @internal
 * Takes typescript data, validates it, and maps keys to match the expected external object External$GetV1ImageProjectsIdResponse
 */
const SchemaOut$GetV1ImageProjectsIdResponse = z
    .object({
    createdAt: z.string(),
    downloads: z.array(get_v1_image_projects_id_response_downloads_item_1.Schemas$GetV1ImageProjectsIdResponseDownloadsItem.out),
    enabled: z.boolean(),
    error: get_v1_image_projects_id_response_error_1.Schemas$GetV1ImageProjectsIdResponseError.out.nullable(),
    id: z.string(),
    imageCount: z.number().int(),
    name: z.string().nullable(),
    status: z.enum([
        "canceled",
        "complete",
        "draft",
        "error",
        "queued",
        "rendering",
    ]),
    totalFrameCost: z.number().int(),
    type: z.enum([
        "AI_HEADSHOT",
        "AI_IMAGE",
        "BACKGROUND_REMOVER",
        "CLOTHES_CHANGER",
        "FACE_SWAP",
        "IMAGE_UPSCALER",
        "PHOTO_EDITOR",
        "QR_CODE",
    ]),
})
    .transform((obj) => {
    return (0, core_1.zodTransform)(obj, {
        createdAt: "created_at",
        downloads: "downloads",
        enabled: "enabled",
        error: "error",
        id: "id",
        imageCount: "image_count",
        name: "name",
        status: "status",
        totalFrameCost: "total_frame_cost",
        type: "type",
    });
});
exports.Schemas$GetV1ImageProjectsIdResponse = {
    in: SchemaIn$GetV1ImageProjectsIdResponse,
    out: SchemaOut$GetV1ImageProjectsIdResponse,
};
